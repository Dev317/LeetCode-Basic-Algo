___________________________________________________________________________________________________________________________

** Post-order traversal is to traverse the left subtree first. Then traverse the right subtree. Finally, visit the root. **
___________________________________________________________________________________________________________________________

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 
 // Using recursion
class Solution {
    List<Integer> output = new ArrayList<>();
    
    public List<Integer> postorderTraversal(TreeNode root) {
        if (root == null) {
            return output;
        }
        
        if (root.left != null) {
            postorderTraversal(root.left);
        }
        
        if (root.right != null) {
            postorderTraversal(root.right);
        }
        
        output.add(root.val);
        return output;
    }
}


//Iterative 
class Solution {
    List<Integer> output = new ArrayList<>();
    
    public List<Integer> postorderTraversal(TreeNode root) {
        if (root == null) {
            return output;
        }
        
        Stack<TreeNode> stackTreeNode = new Stack<>();
        TreeNode prevNode = null;
        TreeNode currNode = root;
        
        while (currNode != null || !stackTreeNode.isEmpty()) {
            if (currNode != null) {
                stackTreeNode.push(currNode);
                currNode = currNode.left;
            } else {
                currNode = stackTreeNode.peek();
                
                if (currNode.right == null || currNode.right == prevNode) {
                    output.add(currNode.val);
                    stackTreeNode.pop();
                    prevNode = currNode;
                    currNode = null;
                } else {
                    currNode = currNode.right;
                }
            }
        }
        return output;
    }
}
