public class Sudoku {
    public static void main(String[] args) {
        int grid[][] = { { 3, 0, 6, 5, 0, 8, 4, 0, 0 },
                         { 5, 2, 0, 0, 0, 0, 0, 0, 0 },
                         { 0, 8, 7, 0, 0, 0, 0, 3, 1 },
                         { 0, 0, 3, 0, 1, 0, 0, 8, 0 },
                         { 9, 0, 0, 8, 6, 3, 0, 0, 5 },
                         { 0, 5, 0, 0, 9, 0, 6, 0, 0 },
                         { 1, 3, 0, 0, 0, 0, 2, 5, 0 },
                         { 0, 0, 0, 0, 0, 0, 0, 7, 4 },
                         { 0, 0, 5, 2, 0, 6, 3, 0, 0 } };
        System.out.println("-------- Before ---------");
        System.out.println();
        print(grid);
        if (solveSuduko(grid, 0, 0)) {
            System.out.println("-------- After ----------");
            print(grid);
        } else {
            System.out.println("No Solution exists");
        }
    }

    public static void print(int[][] grid) {
        for (int i = 0; i < grid.length; i++) {
            if (i % 3 == 0 || i == 0) {
                System.out.println("-------------------------");
            }

            for (int j = 0; j < grid[i].length; j++) {
                if (j % 3 == 0 ||j == 0) {
                    System.out.print("| ");
                }

                System.out.print(grid[i][j] + " ");

                if (j == grid[i].length - 1) {
                    System.out.print("|");
                }
            }
            System.out.println();
        }
        System.out.println("-------------------------");
    }


    public static boolean solveSuduko(int[][] grid, int row, int col) {
        if (row == grid.length - 1 && col == grid[row].length - 1) {
            return true;
        }

        if (col == grid[row].length - 1) {
            row++;
            col = 0;
        }

        if (grid[row][col] == 1) {
            return solveSuduko(grid, row, col + 1);
        }

        for (int num = 1; num < 10; num++) {
            if (isSafe(grid,row,col,num)) {
                grid[row][col] = num;

                if (solveSuduko(grid, row, col + 1)) {
                    return true;
                }
            }

            grid[row][col] = 0;
        }

        return false;
    }

    public static boolean isSafe(int[][] grid, int row, int col, int num) {

        for (int i = 0; i < grid[row].length; i++) {
            if (grid[row][i] == num) {
                return false;
            }
        }

        for (int i = 0; i < grid.length; i++) {
            if (grid[i][col] == num) {
                return false;
            }
        }

        int startRow = row - row % 3, startCol = col - col % 3;
        for (int i = 0; i < 3; i++)
            for (int j = 0; j < 3; j++)
                if (grid[i + startRow][j + startCol] == num)
                    return false;

        return true;
    }

}
